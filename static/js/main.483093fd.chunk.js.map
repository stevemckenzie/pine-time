{"version":3,"sources":["UI/components/Button/styles.module.scss","App/styles.module.scss","Station/components/SearchPage/styles.module.scss","Station/components/StationPage/styles.module.scss","reducer.js","UI/components/LoadingIndicator/styles.module.scss","serviceWorker.js","UI/components/Link/index.js","UI/components/LoadingIndicator/index.js","UI/components/Button/index.js","api.js","Station/normalizers.js","Station/actions/searchStations.js","Station/selectors.js","Station/components/SearchPage/index.js","constants.js","UI/components/Table/index.js","Station/components/StationPage/index.js","Station/actions/loadStationData.js","routes.js","App/index.js","index.js"],"names":["module","exports","initialState","favorites","items","searchResults","stations","combineReducers","state","type","props","id","includes","index","findIndex","f","splice","Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message","Link","children","title","LoadingIndicator","className","loading","classnames","styles","loadingIndicator","Button","disabled","kind","button","DEFAULT_QUERY","apiClient","a","url","options","query","q","stringify","omitBy","v","fetch","headers","response","json","searchClimateStations","stationName","limit","STATION_NAME","getClimateStation","CLIMATE_IDENTIFIER","getClimateStationItems","day","month","year","LOCAL_YEAR","LOCAL_MONTH","LOCAL_DAY","normalizeStations","features","map","coordinates","geometry","properties","elevation","ELEVATION","firstUpdated","FIRST_DATE","lastUpdated","LAST_DATE","province","PROV_STATE_TERR_CODE","searchStations","dispatch","getState","getSearchResults","SearchPage","useForm","mode","formState","isSubmitted","isSubmitting","isValid","handleSubmit","register","useDispatch","onSubmit","results","useSelector","showNoResults","length","search","name","autoFocus","placeholder","ref","required","key","to","moment","format","meta","Table","rows","header","columns","column","HEADERS","StationPage","useParams","getStation","getStationItems","date","maxTemperature","meanTemperature","minTemperature","totalPrecipitation","useState","setLoading","useEffect","climateStations","station","daysAgo","subtract","climateStationItems","LOCAL_DATE","MAX_TEMPERATURE","MEAN_TEMPERATURE","MIN_TEMPERATURE","TOTAL_PRECIPITATION","loadStationData","stationPage","Routes","path","App","app","logo","searchButton","content","middleware","thunk","withExtraArgument","store","applyMiddleware","createStore","createStoreWithMiddleware","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.483093fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"styles_button__11DqB\",\"primary\":\"styles_primary__3zc0g\",\"secondary\":\"styles_secondary__BWsck\",\"loading\":\"styles_loading__1vDzj\",\"children\":\"styles_children__VUq5B\",\"loadingIndicator\":\"styles_loadingIndicator__2k2ae\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"styles_app__3zBUL\",\"header\":\"styles_header__1GaP8\",\"searchButton\":\"styles_searchButton__wuNKH\",\"logo\":\"styles_logo__49Cdz\",\"content\":\"styles_content__Jw4F6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"styles_search__3DMt1\",\"stations\":\"styles_stations__5odA8\",\"meta\":\"styles_meta__1AcvI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stationPage\":\"styles_stationPage__1g8y_\",\"loadingIndicator\":\"styles_loadingIndicator__3yzfn\"};","import { combineReducers } from 'redux';\n\n// TODO: load from localStorage.\nconst initialState = {\n  favorites: [],\n  items: {},\n  searchResults: [],\n  stations: {},\n};\n\nconst stations = (state = initialState, { type, ...props }) => {\n  switch (type) {\n    case 'FAVORITE_ADD': {\n      const { id } = props;\n\n      if (state.favorites.includes(id)) {\n        return state;\n      }\n\n      const favorites = [...state.favorites, id];\n\n      return {\n        ...state,\n        favorites,\n      };\n    }\n\n    case 'FAVORITE_REMOVE': {\n      const { id } = props;\n      const index = state.favorites.findIndex((f) => f === id);\n\n      if (index === -1) {\n        return state;\n      }\n\n      const favorites = [...state.favorites];\n      favorites.splice(index, 1);\n\n      return {\n        ...state,\n        favorites,\n      };\n    }\n\n    case 'SEARCH_RESULTS_UPDATE': {\n      return {\n        ...state,\n        ...props,\n      };\n    }\n\n    case 'STATIONS_UPDATE': {\n      const stations = {\n        ...state.stations,\n        ...props.stations,\n      };\n\n      return {\n        ...state,\n        stations,\n      };\n    }\n\n    case 'STATION_ITEMS_UPDATE': {\n      const items = {\n        ...state.items,\n        ...props.items,\n      };\n\n      return {\n        ...state,\n        items,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  stations,\n});\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingIndicator\":\"styles_loadingIndicator__kkuCt\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\nconst Link = ({ children, title, ...props }) => (\n  <RouterLink title={title} {...props}>\n    <span>{children || title}</span>\n  </RouterLink>\n);\n\nexport default Link;\n","import classnames from 'classnames';\nimport React from 'react';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nimport styles from './styles.module.scss';\n\nconst LoadingIndicator = ({ className, loading = true }) => (\n  <div className={classnames(styles.loadingIndicator, className)}>\n    <ClipLoader loading={loading} />\n  </div>\n);\n\nexport default LoadingIndicator;\n","import classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport LoadingIndicator from '../LoadingIndicator';\n\nimport styles from './styles.module.scss';\n\nconst Button = ({\n  children,\n  disabled,\n  kind,\n  loading = false,\n  title,\n  ...props\n}) => (\n  <button\n    className={classnames(styles.button, {\n      [styles[kind]]: !!kind,\n      [styles.loading]: loading,\n    })}\n    disabled={disabled || loading}\n    title={title}\n    {...props}\n  >\n    {loading && <LoadingIndicator className={styles.loadingIndicator} />}\n    <span className={styles.children}>{children || title}</span>\n  </button>\n);\n\nButton.propTypes = {\n  kind: PropTypes.oneOf(['primary', 'secondary']),\n  loading: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","import { omitBy } from 'lodash';\nimport { stringify } from 'querystring';\n\nconst API_URL = 'https://geo.weather.gc.ca/geomet/features/collections';\nconst DEFAULT_QUERY = { f: 'json' };\n\nexport const apiClient = async ({\n  url,\n  options = {},\n  query = {},\n}) => {\n  const q = stringify({\n    ...DEFAULT_QUERY,\n    ...omitBy(query, (v) => !v),\n  });\n  const response = await fetch(`${API_URL}${url}?${q}`, {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    ...options,\n  });\n\n  return response.json();\n};\n\nexport const searchClimateStations = async (stationName) =>\n  apiClient({\n    url: '/climate-stations/items',\n    query: {\n      limit: 25,\n      STATION_NAME: stationName,\n    },\n  });\n\nexport const getClimateStation = async (id) =>\n  apiClient({\n    url: '/climate-stations/items',\n    query: { CLIMATE_IDENTIFIER: id },\n  });\n\nexport const getClimateStationItems = async ({ id, day, limit = 30, month, year }) =>\n  apiClient({\n    url: `/climate-daily/items/`,\n    query: {\n      CLIMATE_IDENTIFIER: id,\n      limit,\n      LOCAL_YEAR: year,\n      LOCAL_MONTH: month,\n      LOCAL_DAY: day,\n    },\n  });\n","export const normalizeStations = (features) =>\n  features.map(\n    ({\n      geometry: { coordinates },\n      id,\n      properties: {\n        ELEVATION: elevation,\n        FIRST_DATE: firstUpdated,\n        LAST_DATE: lastUpdated,\n        PROV_STATE_TERR_CODE: province,\n        STATION_NAME: stationName,\n      },\n    }) => ({\n      coordinates,\n      id,\n      elevation,\n      firstUpdated,\n      lastUpdated,\n      province,\n      stationName,\n    }),\n  );\n\nexport const normalizeStationItems = (features) =>\n  features.map(\n    ({\n      properties: {\n        LOCAL_DATE: date,\n        MAX_TEMPERATURE: maxTemperature,\n        MEAN_TEMPERATURE: meanTemperature,\n        MIN_TEMPERATURE: minTemperature,\n        TOTAL_PRECIPITATION: totalPrecipitation,\n        // TODO: should we add these?\n        // COOLING_DEGREE_DAYS\n        // HEATING_DEGREE_DAYS:\n      },\n    }) => ({\n      date,\n      maxTemperature,\n      meanTemperature,\n      minTemperature,\n      totalPrecipitation,\n    }),\n  );\n","import { searchClimateStations } from '../../api';\n\nimport { normalizeStations } from '../normalizers';\n\nexport const searchStations = (stationName) => async (dispatch, getState) => {\n  const { features = [] } = await searchClimateStations(stationName);\n  const searchResults = normalizeStations(features);\n\n  dispatch({\n    type: 'SEARCH_RESULTS_UPDATE',\n    searchResults,\n  });\n};\n","export const getStation = (id) => ({ stations: { stations = {} } }) => stations[id];\nexport const getStationItems = (id) => ({ stations: { items = {} } }) => items[id];\nexport const getSearchResults = ({ stations: { searchResults = [] } }) => searchResults;\n","import moment from 'moment';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { DATE_FORMAT } from '../../../constants';\nimport Button from '../../../UI/components/Button';\nimport Link from '../../../UI/components/Link';\n\nimport { searchStations } from '../../actions/searchStations';\nimport { getSearchResults } from '../../selectors';\n\nimport styles from './styles.module.scss';\n\nconst SearchPage = () => {\n  const {\n    formState: { isSubmitted, isSubmitting, isValid },\n    handleSubmit,\n    register,\n  } = useForm({\n    mode: 'onChange',\n  });\n  const dispatch = useDispatch();\n  const onSubmit = async ({ stationName }) =>\n    dispatch(searchStations(stationName));\n\n  const results = useSelector(getSearchResults);\n  const showNoResults = isSubmitted && !isSubmitting && results.length === 0;\n\n  return (\n    <div className={styles.search}>\n      <form name=\"searchForm\" onSubmit={handleSubmit(onSubmit)}>\n        <input\n          autoFocus\n          name=\"stationName\"\n          placeholder=\"Search for weather stations...\"\n          ref={register({ required: true })}\n          type=\"text\"\n        />\n        <Button\n          disabled={!isValid}\n          kind=\"primary\"\n          loading={isSubmitting}\n          title=\"Search\"\n        />\n      </form>\n      {results.length > 0 && (\n        <ul className={styles.stations}>\n          {results.map(({ id, lastUpdated, province, stationName }) => (\n            <li key={id}>\n              <Link title={stationName} to={`/stations/${id}`}>\n                <div>\n                  <div>{stationName}</div>\n                  <div>\n                    <small>\n                      Last updated: {moment(lastUpdated).format(DATE_FORMAT)}\n                    </small>\n                  </div>\n                </div>\n                <div className={styles.meta}>{province}</div>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n      {showNoResults && <p>No stations found.</p>}\n    </div>\n  );\n}\n\nexport default SearchPage;\n","export const DATE_FORMAT = 'YYYY-MM-DD';\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nconst Table = ({ children, headers, rows }) => (\n  <table>\n    <thead>\n      <tr>\n        {headers.map((header) =>\n          typeof header === 'string' ? (\n            <th key={header} title={header}>\n              {header}\n            </th>\n          ) : (\n            header\n          ),\n        )}\n      </tr>\n    </thead>\n    <tbody>\n      {rows.map((columns, index) => (\n        <tr key={index}>\n          {columns.map((column) =>\n            typeof column === 'object' ? column : <td>{column}</td>,\n          )}\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n\nTable.propTypes = {\n  headers: PropTypes.oneOfType([PropTypes.string, 'th']),\n  rows: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, 'th'])),\n};\n\nexport default Table;\n","import moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { DATE_FORMAT } from '../../../constants';\nimport LoadingIndicator from '../../../UI/components/LoadingIndicator';\nimport Table from '../../../UI/components/Table';\n\nimport styles from './styles.module.scss';\nimport { loadStationData } from '../../actions/loadStationData';\nimport { getStation, getStationItems } from '../../selectors';\n\nconst HEADERS = [\n  'Date',\n  'Min Temp',\n  'Max Temp',\n  'Mean Temp',\n  'Precipitation',\n];\n\nconst StationPage = () => {\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const { elevation, firstUpdated, lastUpdated, province, stationName } =\n    useSelector(getStation(id)) || {};\n  const items = useSelector(getStationItems(id)) || [];\n  const rows = items.map(\n    ({\n      date,\n      maxTemperature,\n      meanTemperature,\n      minTemperature,\n      totalPrecipitation,\n    }) => [\n      moment(date).format(DATE_FORMAT),\n      `${minTemperature}C`,\n      `${maxTemperature}C`,\n      `${meanTemperature}C`,\n      totalPrecipitation > 0 ? `${totalPrecipitation}mm` : 0,\n    ],\n  );\n\n  // TODO: figure out better state management around loading data.\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    dispatch(loadStationData(id, setLoading));\n  }, [dispatch, id]);\n\n  return (\n    <div className={styles.stationPage}>\n      {loading ? (\n        <LoadingIndicator className={styles.loadingIndicator} />\n      ) : (\n        <div>\n          <div className={styles.station}>\n            <h2>{stationName}</h2>\n            <div>{province}</div>\n            <div>Elevation: {elevation}m</div>\n            <div>First updated: {moment(firstUpdated).format(DATE_FORMAT)}</div>\n            <div>Last updated: {moment(lastUpdated).format(DATE_FORMAT)}</div>\n          </div>\n          {items.length > 0 && (\n            <Table headers={HEADERS} rows={rows} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default StationPage;\n","import moment from 'moment';\n\nimport { getClimateStationItems, getClimateStation } from '../../api';\nimport { normalizeStations, normalizeStationItems } from '../normalizers';\n\n// TODO: add error handling.\nexport const loadStationData = (id, setLoading) => async (dispatch, getState) => {\n  setLoading(true);\n\n  const { features: climateStations } = await getClimateStation(id);\n\n  if (!climateStations.length) {\n    // TODO: handle when we do not get a station back.\n  }\n\n  const stations = normalizeStations(climateStations);\n  const [station] = stations;\n\n  dispatch({\n    type: 'STATIONS_UPDATE',\n    stations: {\n      [id]: station,\n    },\n  });\n\n  // TODO: make this configurable for the user.\n  const daysAgo = moment().subtract(30, 'days');\n  const month = daysAgo.format('M');\n  const year = daysAgo.format('YYYY');\n\n  const { features: climateStationItems } = await getClimateStationItems({\n    id,\n    month,\n    year,\n  });\n  const items = normalizeStationItems(climateStationItems);\n\n  dispatch({\n    type: 'STATION_ITEMS_UPDATE',\n    items: {\n      [id]: items,\n    },\n  });\n\n  setLoading(false);\n};\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport SearchPage from './Station/components/SearchPage';\nimport StationPage from './Station/components/StationPage';\n\nconst Routes = () => (\n  <Switch>\n    <Route path=\"/stations/search\" children={<SearchPage />} />\n    <Route path=\"/stations/:id\" children={<StationPage />} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\n\nimport Link from '../UI/components/Link';\nimport Routes from '../routes';\n\nimport styles from './styles.module.scss';\n\nconst App = () => (\n  <div className={styles.app}>\n    <div className={styles.header}>\n      <Link className={styles.logo} to=\"/\">\n        <h1>Pine Time</h1>\n      </Link>\n      <Link className={styles.searchButton} title=\"Search for a weather station\" to=\"/stations/search\" />\n    </div>\n    <div className={styles.content}>\n      <Routes />\n    </div>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './App';\nimport reducer from './reducer';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.scss';\n\n// TODO: anything to add?\nconst thunkMiddleware = thunk.withExtraArgument({});\nconst middleware = [thunkMiddleware];\nconst isProduction = process.env.NODE_ENV === 'production';\n\nif (!isProduction) {\n  middleware.push(createLogger());\n}\n\n// TODO: does not support hot reloading yet...\nconst createStoreWithMiddleware = applyMiddleware(...middleware)(createStore);\nconst store = createStoreWithMiddleware(reducer);\n\nif (!isProduction && module.hot) {\n  module.hot.accept('./reducer', () => store.replaceReducer(reducer));\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}