{"version":3,"sources":["components/Page/styles.module.scss","components/Button/styles.module.scss","components/DatePicker/styles.module.scss","components/StationList/styles.module.scss","components/HomePage/styles.module.scss","reducer.js","components/LoadingIndicator/styles.module.scss","components/SearchPage/styles.module.scss","store.js","selectors.js","components/Link/index.js","components/Page/index.js","components/StationList/index.js","constants.js","components/HomePage/index.js","api.js","normalizers.js","components/LoadingIndicator/index.js","components/Button/index.js","components/SearchPage/index.js","actions/loading.js","actions/loadStationItems.js","components/DatePicker/index.js","components/StationPage/index.js","actions/loadStation.js","actions/favorite.js","routes.js","serviceWorker.js","index.js","components/StationPage/styles.module.scss"],"names":["module","exports","combineReducers","stations","state","favorites","items","type","props","id","includes","index","findIndex","f","splice","ui","loading","createStore","middleware","thunk","withExtraArgument","createStoreWithMiddleware","applyMiddleware","createStoreRedux","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadPersistedState","store","reducer","subscribe","throttle","stringify","setItem","e","console","log","persistState","getState","getStation","getStations","getFavorites","isLoading","Link","children","title","Page","header","className","styles","page","logo","to","content","StationList","stationList","map","lastUpdated","province","stationName","key","moment","format","meta","HomePage","useSelector","favoriteStations","favorite","searchButton","homePage","length","DEFAULT_QUERY","apiClient","a","url","options","query","q","omitBy","v","fetch","headers","response","json","searchClimateStations","limit","STATION_NAME","getClimateStation","CLIMATE_IDENTIFIER","getClimateStationItems","day","month","year","LOCAL_YEAR","LOCAL_MONTH","LOCAL_DAY","normalizeStations","features","coordinates","geometry","properties","elevation","ELEVATION","firstUpdated","FIRST_DATE","LAST_DATE","PROV_STATE_TERR_CODE","LoadingIndicator","classnames","loadingIndicator","Button","disabled","kind","button","SearchPage","useForm","mode","formState","isSubmitted","isSubmitting","isValid","handleSubmit","register","useState","results","setResults","showNoResults","onSubmit","searchResults","search","name","autoFocus","placeholder","ref","required","setLoading","dispatch","updateStationItems","DatePicker","minDate","onChange","showCalendar","setShowCalendar","datePicker","onClick","calendarContainer","maxDate","Date","minDetail","value","event","dateToString","date","StationPage","useDispatch","useParams","isFavorite","getStationItems","history","useHistory","useLocation","queryDate","substr","currentDate","currentDateTitle","useEffect","climateStations","station","loadStation","d","getDayMonthYear","climateStationItems","sortBy","LOCAL_DATE","maxTemperature","MAX_TEMPERATURE","minTemperature","MIN_TEMPERATURE","totalPrecipitation","TOTAL_PRECIPITATION","loadStationItems","favoriteButton","setFavorite","stationPage","filter","toDate","push","item","selected","isSame","temp","high","right","c","low","mm","Routes","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7911cfce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"styles_page__tlI5Y\",\"header\":\"styles_header__1icdI\",\"logo\":\"styles_logo__1nkjt\",\"content\":\"styles_content__ka8Wk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"styles_button__12U2K\",\"primary\":\"styles_primary__3HQ5-\",\"secondary\":\"styles_secondary__2pJ5d\",\"loading\":\"styles_loading__3E_HN\",\"loadingIndicator\":\"styles_loadingIndicator__3yut4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"datePicker\":\"styles_datePicker__3X6jL\",\"button\":\"styles_button__2ydJx\",\"calendarContainer\":\"styles_calendarContainer__7a9RA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stationList\":\"styles_stationList__36qqT\",\"meta\":\"styles_meta__2u-js\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"styles_home__2W7Yz\",\"searchButton\":\"styles_searchButton__19h62\"};","import { combineReducers } from 'redux';\n\nconst stations = (state = {\n  favorites: [],\n  items: {},\n  stations: {},\n}, { type, ...props }) => {\n  switch (type) {\n    case 'FAVORITE_ADD': {\n      const { id } = props;\n\n      if (state.favorites.includes(id)) {\n        return state;\n      }\n\n      const favorites = [...state.favorites, id];\n\n      return {\n        ...state,\n        favorites,\n      };\n    }\n\n    case 'FAVORITE_REMOVE': {\n      const { id } = props;\n      const index = state.favorites.findIndex((f) => f === id);\n\n      if (index === -1) {\n        return state;\n      }\n\n      const favorites = [...state.favorites];\n      favorites.splice(index, 1);\n\n      return {\n        ...state,\n        favorites,\n      };\n    }\n\n    case 'STATIONS_UPDATE': {\n      const stations = {\n        ...state.stations,\n        ...props.stations,\n      };\n\n      return {\n        ...state,\n        stations,\n      };\n    }\n\n    case 'STATION_ITEMS_UPDATE': {\n      const items = {\n        ...state.items,\n        ...props.items,\n      };\n\n      return {\n        ...state,\n        items,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nconst ui = (state = { loading: 0 }, { type, ...props }) => {\n  switch (type) {\n    case 'SET_LOADING': {\n      const loading = state.loading + props.loading;\n\n      return {\n        ...state,\n        loading,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  stations,\n  ui,\n});\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingIndicator\":\"styles_loadingIndicator__89poN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"styles_search__MREa2\"};","import { throttle } from 'lodash';\nimport { applyMiddleware, createStore as createStoreRedux } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nimport reducer from './reducer';\n\nexport const loadPersistedState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const persistState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (e) {\n    console.log('Failed to persist', e);\n  }\n};\n\n// TODO: anything to add?\nexport const createStore = () => {\n  const thunkMiddleware = thunk.withExtraArgument({});\n  const middleware = [thunkMiddleware];\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  if (!isProduction) {\n    middleware.push(createLogger());\n  }\n\n  // TODO: does not support hot reloading yet...\n  const createStoreWithMiddleware = applyMiddleware(...middleware)(\n    createStoreRedux,\n  );\n\n  const persistedState = loadPersistedState();\n  const store = createStoreWithMiddleware(reducer, persistedState);\n\n  store.subscribe(() => {\n    store.subscribe(\n      throttle(() => {\n        // TODO: figure out a better way to manage selective persisting.\n        const { stations } = store.getState();\n        persistState({ stations });\n      }, 1000),\n    );\n  });\n\n  if (!isProduction && module.hot) {\n    module.hot.accept('./reducer', () => store.replaceReducer(reducer));\n  }\n\n  return store;\n};\n","export const getStation = (id) => ({ stations: { stations = {} } }) => stations[id];\nexport const getStations = ({ stations: { stations = {} } }) => stations;\nexport const getStationItems = (id) => ({ stations: { items = {} } }) => items[id];\nexport const getFavorites = ({ stations: { favorites = [] }}) => favorites;\nexport const isFavorite = (id) => ({ stations: { favorites = [] }}) => favorites.includes(id);\nexport const isLoading = ({ ui: { loading } }) => loading > 0;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\nconst Link = ({ children, title, ...props }) => (\n  <RouterLink title={title} {...props}>\n    <span>{children || title}</span>\n  </RouterLink>\n);\n\nexport default Link;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Link from '../Link';\n\nimport styles from './styles.module.scss';\n\nconst Page = ({ children, header }) => (\n  <div className={styles.page}>\n    <div className={styles.header}>\n      <Link className={styles.logo} to=\"/\">\n        <h1>Pine Time</h1>\n      </Link>\n      {header}\n    </div>\n    <div className={styles.content}>\n      {children}\n    </div>\n  </div>\n);\n\nPage.propTypes = {\n  header: PropTypes.node,\n};\n\nexport default Page;\n","import moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { DATE_FORMAT } from '../../constants';\n\nimport Link from '../Link';\n\nimport styles from './styles.module.scss';\n\nconst StationList = ({ stations }) => (\n  <ul className={styles.stationList}>\n    {stations.map(({ id, lastUpdated, province, stationName }) => (\n      <li key={id}>\n        <Link title={stationName} to={`/stations/${id}`}>\n          <div>\n            <div>{stationName}</div>\n            <div>\n              <small>\n                Last updated: {moment(lastUpdated).format(DATE_FORMAT)}\n              </small>\n            </div>\n          </div>\n          <div className={styles.meta}>{province}</div>\n        </Link>\n      </li>\n    ))}\n  </ul>\n);\n\nStationList.propTypes = {\n  stations: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    lastUpdated: PropTypes.string,\n    province: PropTypes.string,\n    stationName: PropTypes.string,\n  })).isRequired,\n}\n\nexport default StationList;\n","export const DATE_FORMAT = 'YYYY-M-D';\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { getFavorites, getStations } from '../../selectors';\n\nimport Link from '../Link';\nimport Page from '../Page';\nimport StationList from '../StationList';\n\nimport styles from './styles.module.scss';\n\nconst HomePage = () => {\n  const favorites = useSelector(getFavorites);\n  const stations = useSelector(getStations);\n  const favoriteStations = favorites.map((favorite) => stations[favorite]);\n\n  return (\n    <Page\n      header={\n        <Link\n          className={styles.searchButton}\n          title=\"Search for a weather station\"\n          to=\"/stations/search\"\n        />\n      }\n    >\n      <div className={styles.homePage}>\n        {favoriteStations && favoriteStations.length > 0 ? (\n          <StationList stations={favoriteStations} />\n        ) : (\n          <p>\n            <Link title=\"Search\" to=\"/stations/search\">\n              Search\n            </Link>{' '}\n            for weather stations.\n          </p>\n        )}\n      </div>\n    </Page>\n  );\n};\n\nexport default HomePage;\n","import { omitBy } from 'lodash';\nimport { stringify } from 'querystring';\n\nconst API_URL = 'https://geo.weather.gc.ca/geomet/features/collections';\nconst DEFAULT_QUERY = { f: 'json' };\n\nexport const apiClient = async ({ url, options = {}, query = {} }) => {\n  const q = stringify({\n    ...DEFAULT_QUERY,\n    ...omitBy(query, (v) => !v),\n  });\n  const response = await fetch(`${API_URL}${url}?${q}`, {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    ...options,\n  });\n\n  return response.json();\n};\n\n// TODO: figure out how to limit stations to ones that have been updated within 30 days.\nexport const searchClimateStations = async ({\n  limit = 30,\n  stationName,\n}) =>\n  apiClient({\n    url: '/climate-stations/items',\n    query: {\n      limit,\n      STATION_NAME: stationName,\n    },\n  });\n\nexport const getClimateStation = async (id) =>\n  apiClient({\n    url: '/climate-stations/items',\n    query: { CLIMATE_IDENTIFIER: id },\n  });\n\nexport const getClimateStationItems = async ({\n  id,\n  day,\n  limit = 30,\n  month,\n  year,\n}) =>\n  apiClient({\n    url: `/climate-daily/items/`,\n    query: {\n      CLIMATE_IDENTIFIER: id,\n      limit,\n      LOCAL_YEAR: year,\n      LOCAL_MONTH: month,\n      LOCAL_DAY: day,\n    },\n  });\n","import { sortBy } from 'lodash';\n\nexport const normalizeStations = (features) =>\n  features.map(\n    ({\n      geometry: { coordinates },\n      id,\n      properties: {\n        ELEVATION: elevation,\n        FIRST_DATE: firstUpdated,\n        LAST_DATE: lastUpdated,\n        PROV_STATE_TERR_CODE: province,\n        STATION_NAME: stationName,\n      },\n    }) => ({\n      coordinates,\n      id,\n      elevation,\n      firstUpdated,\n      lastUpdated,\n      province,\n      stationName,\n    }),\n  );\n\nexport const normalizeStationItems = (features) =>\n  sortBy(\n    features.map(\n      ({\n        properties: {\n          LOCAL_DATE: date,\n          MAX_TEMPERATURE: maxTemperature,\n          MIN_TEMPERATURE: minTemperature,\n          TOTAL_PRECIPITATION: totalPrecipitation,\n          // TODO: should we add these?\n          // COOLING_DEGREE_DAYS\n          // HEATING_DEGREE_DAYS:\n          // MEAN_TEMPERATURE\n        },\n      }) => ({\n        date,\n        maxTemperature,\n        minTemperature,\n        totalPrecipitation,\n      }),\n    ),\n    'date',\n  );\n","import classnames from 'classnames';\nimport React from 'react';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nimport styles from './styles.module.scss';\n\nconst LoadingIndicator = ({ className, loading = true }) => (\n  <div className={classnames(styles.loadingIndicator, className)}>\n    <ClipLoader loading={loading} />\n  </div>\n);\n\nexport default LoadingIndicator;\n","import classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport LoadingIndicator from '../LoadingIndicator';\n\nimport styles from './styles.module.scss';\n\nconst Button = ({\n  children,\n  className,\n  disabled,\n  kind,\n  loading = false,\n  title,\n  ...props\n}) => (\n  <button\n    className={classnames(styles.button, {\n      [styles[kind]]: !!kind,\n      [styles.loading]: loading,\n      [className]: !!className,\n    })}\n    disabled={disabled || loading}\n    title={title}\n    {...props}\n  >\n    {loading && <LoadingIndicator className={styles.loadingIndicator} />}\n    <span>{children || title}</span>\n  </button>\n);\n\nButton.propTypes = {\n  kind: PropTypes.oneOf(['primary', 'secondary']),\n  loading: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { searchClimateStations } from '../../api';\nimport { normalizeStations } from '../../normalizers';\n\nimport Button from '../Button';\nimport Page from '../Page';\nimport StationList from '../StationList';\n\nimport styles from './styles.module.scss';\n\nconst SearchPage = () => {\n  const {\n    formState: { isSubmitted, isSubmitting, isValid },\n    handleSubmit,\n    register,\n  } = useForm({\n    mode: 'onChange',\n  });\n  const [results, setResults] = useState([]);\n  const showNoResults = isSubmitted && !isSubmitting && results.length === 0;\n  const onSubmit = async ({ stationName }) => {\n    const { features = [] } = await searchClimateStations({ stationName });\n    const searchResults = normalizeStations(features);\n    setResults(searchResults);\n  };\n\n  return (\n    <Page>\n      <div className={styles.search}>\n        <form name=\"searchForm\" onSubmit={handleSubmit(onSubmit)}>\n          <input\n            autoFocus\n            name=\"stationName\"\n            placeholder=\"Search for weather stations...\"\n            ref={register({ required: true })}\n            type=\"text\"\n          />\n          <Button\n            disabled={!isValid}\n            kind=\"primary\"\n            loading={isSubmitting}\n            title=\"Search\"\n          />\n        </form>\n        {results.length > 0 && (\n          <StationList stations={results} />\n        )}\n        {showNoResults && <p>No stations found.</p>}\n      </div>\n    </Page>\n  );\n}\n\nexport default SearchPage;\n","export const setLoading = (loading) => async (dispatch) =>\n  dispatch({\n    loading: loading ? 1 : -1,\n    type: 'SET_LOADING',\n  });\n","import { getClimateStationItems } from '../api';\nimport { normalizeStationItems } from '../normalizers';\n\nimport { setLoading } from './loading';\n\nconst updateStationItems = (id, items) => ({\n  type: 'STATION_ITEMS_UPDATE',\n  items: {\n    [id]: items,\n  },\n});\n\n// TODO: add error handling.\nexport const loadStationItems = ({ id, limit, month, year }) => async (\n  dispatch,\n  getState,\n) => {\n  dispatch(setLoading(true));\n  dispatch(updateStationItems(id, []));\n\n  const { features: climateStationItems } = await getClimateStationItems({\n    id,\n    limit,\n    month,\n    year,\n  });\n\n  dispatch(updateStationItems(id, normalizeStationItems(climateStationItems)));\n  dispatch(setLoading(false));\n};\n","import React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\n\nimport Button from '../Button';\n\nimport styles from './styles.module.scss';\n\nconst DatePicker = ({ minDate, onChange, title, ...props }) => {\n  const [showCalendar, setShowCalendar] = useState(false);\n  const handleChange = (value, event) => {\n    if (onChange) {\n      onChange(value, event);\n    }\n\n    setShowCalendar(false);\n  }\n  const toggleCalendar = () => setShowCalendar(!showCalendar);\n\n  return (\n    <div className={styles.datePicker}>\n      <Button\n        className={styles.button}\n        kind=\"secondary\"\n        onClick={toggleCalendar}\n        title={title}\n      />\n      {showCalendar && (\n        <div className={styles.calendarContainer}>\n          <Calendar\n            maxDate={new Date()}\n            minDate={minDate}\n            minDetail=\"year\"\n            onChange={handleChange}\n            {...props}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DatePicker;\n","import classnames from 'classnames';\nimport moment from 'moment';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation, useParams } from 'react-router-dom';\nimport { parse, stringify } from 'querystring';\n\nimport { setFavorite } from '../../actions/favorite';\nimport { loadStation } from '../../actions/loadStation';\nimport { loadStationItems } from '../../actions/loadStationItems';\nimport { DATE_FORMAT } from '../../constants';\nimport {\n  getStation,\n  getStationItems,\n  isFavorite,\n  isLoading,\n} from '../../selectors';\n\nimport Button from '../Button';\nimport DatePicker from '../DatePicker';\nimport LoadingIndicator from '../LoadingIndicator';\nimport Page from '../Page';\n\nimport styles from './styles.module.scss';\n\nconst dateToString = (date) => moment(date).format(DATE_FORMAT);\nconst getDayMonthYear = (date) => {\n  const d = moment(date);\n\n  return {\n    day: d.format('D'),\n    month: d.format('M'),\n    year: d.format('YYYY'),\n  };\n};\n\nconst StationPage = () => {\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const favorite = useSelector(isFavorite(id));\n  const handleFavorite = () => dispatch(setFavorite(id, !favorite));\n  const { elevation, firstUpdated, lastUpdated, stationName } =\n    useSelector(getStation(id)) || {};\n  const items = useSelector(getStationItems(id)) || [];\n  const loading = useSelector(isLoading);\n  const history = useHistory();\n  const handleDateChange = (date) => {\n    history.push({\n      search: stringify({ date: dateToString(date) }),\n    });\n  };\n\n  const { search } = useLocation();\n  const { date: queryDate } = parse(search.substr(1));\n  const currentDate = queryDate ? moment(queryDate, DATE_FORMAT) : moment();\n  const currentDateTitle = currentDate.format('MMMM YYYY');\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    dispatch(loadStation(id));\n  }, [dispatch, id]);\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    const { month, year } = getDayMonthYear(queryDate);\n    dispatch(loadStationItems({ id, month, year }));\n  }, [dispatch, id, queryDate]);\n\n  return (\n    <Page\n      header={\n        <Button\n          className={classnames(styles.favoriteButton, {\n            [styles.favorite]: favorite,\n          })}\n          onClick={handleFavorite}\n          title={favorite ? 'Remove from favorites' : 'Add to favorites'}\n        />\n      }\n    >\n      <div className={styles.stationPage}>\n        {stationName && (\n          <div className={styles.station}>\n            <h2>{stationName}</h2>\n            <div>Station elevation: {elevation}m</div>\n            <div>First updated: {moment(firstUpdated).format(DATE_FORMAT)}</div>\n            <div>Last updated: {moment(lastUpdated).format(DATE_FORMAT)}</div>\n          </div>\n        )}\n        {items.length > 0 && (\n          <div className={styles.items}>\n            <div className={styles.filter}>\n              <DatePicker\n                minDate={moment(firstUpdated).toDate()}\n                onChange={handleDateChange}\n                title={currentDateTitle}\n                value={currentDate.toDate()}\n              />\n            </div>\n            {items.map(\n              ({\n                date,\n                maxTemperature,\n                minTemperature,\n                totalPrecipitation,\n              }) => (\n                <div\n                  className={classnames(styles.item, {\n                    [styles.selected]: moment(date).isSame(currentDate),\n                  })}\n                >\n                  <div className={styles.day}>{moment(date).format('D')}</div>\n                  <div className={styles.temp}>\n                    <div className={styles.high}>{maxTemperature}</div>\n                    <div className={styles.right}>\n                      <div className={styles.c}>°C</div>\n                      <div className={styles.low}>{minTemperature}</div>\n                    </div>\n                  </div>\n                  <div className={styles.mm}>{totalPrecipitation}mm</div>\n                </div>\n              ),\n            )}\n          </div>\n        )}\n        {loading && <LoadingIndicator className={styles.loadingIndicator} />}\n      </div>\n    </Page>\n  );\n};\n\nexport default StationPage;\n","import { getClimateStation } from '../api';\nimport { normalizeStations } from '../normalizers';\nimport { getStation } from '../selectors';\n\nimport { setLoading } from './loading';\n\n// TODO: add error handling.\nexport const loadStation = (id) => async (\n  dispatch,\n  getState,\n) => {\n  if (getStation(id)(getState())) {\n    return;\n  }\n\n  dispatch(setLoading(true));\n\n  const { features: climateStations } = await getClimateStation(id);\n\n  if (!climateStations.length) {\n    // TODO: handle when we do not get a station back.\n  }\n\n  const stations = normalizeStations(climateStations);\n  const [station] = stations;\n\n  dispatch({\n    type: 'STATIONS_UPDATE',\n    stations: {\n      [id]: station,\n    },\n  });\n\n  dispatch(setLoading(false));\n};\n","export const setFavorite = (id, favorite) => async (dispatch) =>\n  dispatch({\n    id,\n    type: favorite ? 'FAVORITE_ADD' : 'FAVORITE_REMOVE',\n  });\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport HomePage from './components/HomePage';\nimport SearchPage from './components/SearchPage';\nimport StationPage from './components/StationPage';\n\nconst Routes = () => (\n  <Switch>\n    <Route path=\"/stations/search\" children={<SearchPage />} />\n    <Route path=\"/stations/:id\" children={<StationPage />} />\n    <Route path=\"/\" children={<HomePage />} />\n  </Switch>\n);\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport Routes from './routes';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from './store';\n\nimport './styles/index.scss';\n\nconst store = createStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <Routes />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stationPage\":\"styles_stationPage__14IdA\",\"items\":\"styles_items__1J9qT\",\"filter\":\"styles_filter__1s-4h\",\"item\":\"styles_item__1P1ra\",\"selected\":\"styles_selected__37TCM\",\"day\":\"styles_day__2914Z\",\"mm\":\"styles_mm__bgcXI\",\"temp\":\"styles_temp__3F8zV\",\"high\":\"styles_high__DLHV8\",\"right\":\"styles_right__2lE8X\",\"c\":\"styles_c__m44DG\",\"low\":\"styles_low__2fGzc\",\"loadingIndicator\":\"styles_loadingIndicator__1xERv\",\"station\":\"styles_station__-hdqL\",\"favoriteButton\":\"styles_favoriteButton__1K8-u\",\"favorite\":\"styles_favorite__1JNtB\"};"],"sourceRoot":""}