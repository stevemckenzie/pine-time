{"version":3,"sources":["components/Button/styles.module.scss","components/App/styles.module.scss","components/SearchPage/styles.module.scss","components/StationPage/styles.module.scss","reducer.js","components/LoadingIndicator/styles.module.scss","store.js","components/Link/index.js","api.js","normalizers.js","components/LoadingIndicator/index.js","components/Button/index.js","components/SearchPage/index.js","constants.js","selectors.js","actions/loading.js","components/Table/index.js","components/StationPage/index.js","actions/loadStation.js","actions/loadStationItems.js","routes.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","combineReducers","stations","state","favorites","items","type","props","id","includes","index","findIndex","f","splice","ui","loading","createStore","middleware","thunk","withExtraArgument","createStoreWithMiddleware","applyMiddleware","createStoreRedux","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadPersistedState","store","reducer","subscribe","throttle","stringify","setItem","e","console","log","persistState","getState","Link","children","title","DEFAULT_QUERY","apiClient","a","url","options","query","q","omitBy","v","fetch","headers","response","json","searchClimateStations","limit","stationName","STATION_NAME","getClimateStation","CLIMATE_IDENTIFIER","getClimateStationItems","day","month","year","LOCAL_YEAR","LOCAL_MONTH","LOCAL_DAY","normalizeStations","features","map","coordinates","geometry","properties","elevation","ELEVATION","firstUpdated","FIRST_DATE","lastUpdated","LAST_DATE","province","PROV_STATE_TERR_CODE","LoadingIndicator","className","classnames","styles","loadingIndicator","Button","disabled","kind","button","SearchPage","useForm","mode","formState","isSubmitted","isSubmitting","isValid","handleSubmit","register","useState","results","setResults","showNoResults","length","onSubmit","searchResults","search","name","autoFocus","placeholder","ref","required","key","to","moment","format","meta","getStation","getStationItems","isLoading","setLoading","dispatch","Table","rows","header","columns","column","HEADERS","StationPage","useDispatch","useParams","useSelector","date","maxTemperature","meanTemperature","minTemperature","totalPrecipitation","useEffect","climateStations","station","loadStation","today","climateStationItems","sortBy","LOCAL_DATE","MAX_TEMPERATURE","MEAN_TEMPERATURE","MIN_TEMPERATURE","TOTAL_PRECIPITATION","loadStationItems","stationPage","Routes","path","App","app","logo","searchButton","content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f88834f9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"styles_button__12U2K\",\"primary\":\"styles_primary__3HQ5-\",\"secondary\":\"styles_secondary__2pJ5d\",\"loading\":\"styles_loading__3E_HN\",\"children\":\"styles_children__1JDIs\",\"loadingIndicator\":\"styles_loadingIndicator__3yut4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"styles_app__1jJpR\",\"header\":\"styles_header__3SREE\",\"searchButton\":\"styles_searchButton__g3D_P\",\"logo\":\"styles_logo__Q20fk\",\"content\":\"styles_content__15oFw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"styles_search__MREa2\",\"stations\":\"styles_stations__1UHHn\",\"meta\":\"styles_meta__3ijpz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stationPage\":\"styles_stationPage__14IdA\",\"loadingIndicator\":\"styles_loadingIndicator__1xERv\"};","import { combineReducers } from 'redux';\n\nconst stations = (state = {\n  favorites: [],\n  items: {},\n  stations: {},\n}, { type, ...props }) => {\n  switch (type) {\n    case 'FAVORITE_ADD': {\n      const { id } = props;\n\n      if (state.favorites.includes(id)) {\n        return state;\n      }\n\n      const favorites = [...state.favorites, id];\n\n      return {\n        ...state,\n        favorites,\n      };\n    }\n\n    case 'FAVORITE_REMOVE': {\n      const { id } = props;\n      const index = state.favorites.findIndex((f) => f === id);\n\n      if (index === -1) {\n        return state;\n      }\n\n      const favorites = [...state.favorites];\n      favorites.splice(index, 1);\n\n      return {\n        ...state,\n        favorites,\n      };\n    }\n\n    case 'STATIONS_UPDATE': {\n      const stations = {\n        ...state.stations,\n        ...props.stations,\n      };\n\n      return {\n        ...state,\n        stations,\n      };\n    }\n\n    case 'STATION_ITEMS_UPDATE': {\n      const items = {\n        ...state.items,\n        ...props.items,\n      };\n\n      return {\n        ...state,\n        items,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nconst ui = (state = { loading: 0 }, { type, ...props }) => {\n  switch (type) {\n    case 'SET_LOADING': {\n      const loading = state.loading + props.loading;\n\n      return {\n        ...state,\n        loading,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  stations,\n  ui,\n});\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingIndicator\":\"styles_loadingIndicator__89poN\"};","import { throttle } from 'lodash';\nimport { applyMiddleware, createStore as createStoreRedux } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nimport reducer from './reducer';\n\nexport const loadPersistedState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const persistState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (e) {\n    console.log('Failed to persist', e);\n  }\n};\n\n// TODO: anything to add?\nexport const createStore = () => {\n  const thunkMiddleware = thunk.withExtraArgument({});\n  const middleware = [thunkMiddleware];\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  if (!isProduction) {\n    middleware.push(createLogger());\n  }\n\n  // TODO: does not support hot reloading yet...\n  const createStoreWithMiddleware = applyMiddleware(...middleware)(\n    createStoreRedux,\n  );\n\n  const persistedState = loadPersistedState();\n  const store = createStoreWithMiddleware(reducer, persistedState);\n\n  store.subscribe(() => {\n    store.subscribe(\n      throttle(() => {\n        persistState(store.getState());\n      }, 1000),\n    );\n  });\n\n  if (!isProduction && module.hot) {\n    module.hot.accept('./reducer', () => store.replaceReducer(reducer));\n  }\n\n  return store;\n};\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\nconst Link = ({ children, title, ...props }) => (\n  <RouterLink title={title} {...props}>\n    <span>{children || title}</span>\n  </RouterLink>\n);\n\nexport default Link;\n","import { omitBy } from 'lodash';\nimport { stringify } from 'querystring';\n\nconst API_URL = 'https://geo.weather.gc.ca/geomet/features/collections';\nconst DEFAULT_QUERY = { f: 'json' };\n\nexport const apiClient = async ({ url, options = {}, query = {} }) => {\n  const q = stringify({\n    ...DEFAULT_QUERY,\n    ...omitBy(query, (v) => !v),\n  });\n  const response = await fetch(`${API_URL}${url}?${q}`, {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    ...options,\n  });\n\n  return response.json();\n};\n\n// TODO: figure out how to limit stations to ones that have been updated within 30 days.\nexport const searchClimateStations = async ({\n  limit = 30,\n  stationName,\n}) =>\n  apiClient({\n    url: '/climate-stations/items',\n    query: {\n      limit,\n      STATION_NAME: stationName,\n    },\n  });\n\nexport const getClimateStation = async (id) =>\n  apiClient({\n    url: '/climate-stations/items',\n    query: { CLIMATE_IDENTIFIER: id },\n  });\n\nexport const getClimateStationItems = async ({\n  id,\n  day,\n  limit = 30,\n  month,\n  year,\n}) =>\n  apiClient({\n    url: `/climate-daily/items/`,\n    query: {\n      CLIMATE_IDENTIFIER: id,\n      limit,\n      LOCAL_YEAR: year,\n      LOCAL_MONTH: month,\n      LOCAL_DAY: day,\n    },\n  });\n","import { sortBy } from 'lodash';\n\nexport const normalizeStations = (features) =>\n  features.map(\n    ({\n      geometry: { coordinates },\n      id,\n      properties: {\n        ELEVATION: elevation,\n        FIRST_DATE: firstUpdated,\n        LAST_DATE: lastUpdated,\n        PROV_STATE_TERR_CODE: province,\n        STATION_NAME: stationName,\n      },\n    }) => ({\n      coordinates,\n      id,\n      elevation,\n      firstUpdated,\n      lastUpdated,\n      province,\n      stationName,\n    }),\n  );\n\nexport const normalizeStationItems = (features) =>\n  sortBy(features.map(\n    ({\n      properties: {\n        LOCAL_DATE: date,\n        MAX_TEMPERATURE: maxTemperature,\n        MEAN_TEMPERATURE: meanTemperature,\n        MIN_TEMPERATURE: minTemperature,\n        TOTAL_PRECIPITATION: totalPrecipitation,\n        // TODO: should we add these?\n        // COOLING_DEGREE_DAYS\n        // HEATING_DEGREE_DAYS:\n      },\n    }) => ({\n      date,\n      maxTemperature,\n      meanTemperature,\n      minTemperature,\n      totalPrecipitation,\n    }),\n  ), 'date');\n","import classnames from 'classnames';\nimport React from 'react';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nimport styles from './styles.module.scss';\n\nconst LoadingIndicator = ({ className, loading = true }) => (\n  <div className={classnames(styles.loadingIndicator, className)}>\n    <ClipLoader loading={loading} />\n  </div>\n);\n\nexport default LoadingIndicator;\n","import classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport LoadingIndicator from '../LoadingIndicator';\n\nimport styles from './styles.module.scss';\n\nconst Button = ({\n  children,\n  disabled,\n  kind,\n  loading = false,\n  title,\n  ...props\n}) => (\n  <button\n    className={classnames(styles.button, {\n      [styles[kind]]: !!kind,\n      [styles.loading]: loading,\n    })}\n    disabled={disabled || loading}\n    title={title}\n    {...props}\n  >\n    {loading && <LoadingIndicator className={styles.loadingIndicator} />}\n    <span className={styles.children}>{children || title}</span>\n  </button>\n);\n\nButton.propTypes = {\n  kind: PropTypes.oneOf(['primary', 'secondary']),\n  loading: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","import moment from 'moment';\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { searchClimateStations } from '../../api';\nimport { DATE_FORMAT } from '../../constants';\nimport { normalizeStations } from '../../normalizers';\n\nimport Button from '../Button';\nimport Link from '../Link';\n\nimport styles from './styles.module.scss';\n\nconst SearchPage = () => {\n  const {\n    formState: { isSubmitted, isSubmitting, isValid },\n    handleSubmit,\n    register,\n  } = useForm({\n    mode: 'onChange',\n  });\n  const [results, setResults] = useState([]);\n  const showNoResults = isSubmitted && !isSubmitting && results.length === 0;\n  const onSubmit = async ({ stationName }) => {\n    const { features = [] } = await searchClimateStations({ stationName });\n    const searchResults = normalizeStations(features);\n    setResults(searchResults);\n  };\n\n  return (\n    <div className={styles.search}>\n      <form name=\"searchForm\" onSubmit={handleSubmit(onSubmit)}>\n        <input\n          autoFocus\n          name=\"stationName\"\n          placeholder=\"Search for weather stations...\"\n          ref={register({ required: true })}\n          type=\"text\"\n        />\n        <Button\n          disabled={!isValid}\n          kind=\"primary\"\n          loading={isSubmitting}\n          title=\"Search\"\n        />\n      </form>\n      {results.length > 0 && (\n        <ul className={styles.stations}>\n          {results.map(({ id, lastUpdated, province, stationName }) => (\n            <li key={id}>\n              <Link title={stationName} to={`/stations/${id}`}>\n                <div>\n                  <div>{stationName}</div>\n                  <div>\n                    <small>\n                      Last updated: {moment(lastUpdated).format(DATE_FORMAT)}\n                    </small>\n                  </div>\n                </div>\n                <div className={styles.meta}>{province}</div>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n      {showNoResults && <p>No stations found.</p>}\n    </div>\n  );\n}\n\nexport default SearchPage;\n","export const DATE_FORMAT = 'YYYY-MM-DD';\n","export const getStation = (id) => ({ stations: { stations = {} } }) => stations[id];\nexport const getStationItems = (id) => ({ stations: { items = {} } }) => items[id];\n\nexport const isLoading = ({ ui: { loading } }) => loading > 0;\n","export const setLoading = (loading) => async (dispatch) =>\n  dispatch({\n    loading: loading ? 1 : -1,\n    type: 'SET_LOADING',\n  });\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nconst Table = ({ children, headers, rows }) => (\n  <table>\n    <thead>\n      <tr>\n        {headers.map((header) =>\n          typeof header === 'string' ? (\n            <th key={header} title={header}>\n              {header}\n            </th>\n          ) : (\n            header\n          ),\n        )}\n      </tr>\n    </thead>\n    <tbody>\n      {rows.map((columns, index) => (\n        <tr key={index}>\n          {columns.map((column) =>\n            typeof column === 'object' ? column : <td>{column}</td>,\n          )}\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n\nTable.propTypes = {\n  headers: PropTypes.oneOfType([PropTypes.string, 'th']),\n  rows: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, 'th'])),\n};\n\nexport default Table;\n","import moment from 'moment';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { loadStation } from '../../actions/loadStation';\nimport { loadStationItems } from '../../actions/loadStationItems';\nimport { DATE_FORMAT } from '../../constants';\nimport { getStation, getStationItems, isLoading } from '../../selectors';\n\nimport LoadingIndicator from '../LoadingIndicator';\nimport Table from '../Table';\n\nimport styles from './styles.module.scss';\n\nconst HEADERS = [\n  'Date',\n  'Min Temp',\n  'Max Temp',\n  'Mean Temp',\n  'Precipitation',\n];\n\nconst StationPage = () => {\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const { elevation, firstUpdated, lastUpdated, province, stationName } =\n    useSelector(getStation(id)) || {};\n  const items = useSelector(getStationItems(id)) || [];\n  const rows = items.map(\n    ({\n      date,\n      maxTemperature,\n      meanTemperature,\n      minTemperature,\n      totalPrecipitation,\n    }) => [\n      moment(date).format(DATE_FORMAT),\n      `${minTemperature}C`,\n      `${maxTemperature}C`,\n      `${meanTemperature}C`,\n      totalPrecipitation > 0 ? `${totalPrecipitation}mm` : 0,\n    ],\n  );\n  const loading = useSelector(isLoading);\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    dispatch(loadStation(id));\n    dispatch(loadStationItems(id));\n  }, [dispatch, id]);\n\n  return (\n    <div className={styles.stationPage}>\n      {loading ? (\n        <LoadingIndicator className={styles.loadingIndicator} />\n      ) : (\n        <div>\n          <div className={styles.station}>\n            <h2>{stationName}</h2>\n            <div>{province}</div>\n            <div>Station elevation: {elevation}m</div>\n            <div>First updated: {moment(firstUpdated).format(DATE_FORMAT)}</div>\n            <div>Last updated: {moment(lastUpdated).format(DATE_FORMAT)}</div>\n          </div>\n          {items.length > 0 && (\n            <Table headers={HEADERS} rows={rows} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default StationPage;\n","import { getClimateStation } from '../api';\nimport { normalizeStations } from '../normalizers';\nimport { getStation } from '../selectors';\n\nimport { setLoading } from './loading';\n\n// TODO: add error handling.\nexport const loadStation = (id) => async (\n  dispatch,\n  getState,\n) => {\n  if (getStation(id)(getState())) {\n    return;\n  }\n\n  dispatch(setLoading(true));\n\n  const { features: climateStations } = await getClimateStation(id);\n\n  if (!climateStations.length) {\n    // TODO: handle when we do not get a station back.\n  }\n\n  const stations = normalizeStations(climateStations);\n  const [station] = stations;\n\n  dispatch({\n    type: 'STATIONS_UPDATE',\n    stations: {\n      [id]: station,\n    },\n  });\n\n  dispatch(setLoading(false));\n};\n","import moment from 'moment';\n\nimport { getClimateStationItems, getClimateStation } from '../api';\nimport { normalizeStations, normalizeStationItems } from '../normalizers';\nimport { getStationItems } from '../selectors';\n\nimport { setLoading } from './loading';\n\n// TODO: add error handling.\nexport const loadStationItems = (id) => async (\n  dispatch,\n  getState,\n) => {\n  if (getStationItems(id)(getState())) {\n    return;\n  }\n\n  dispatch(setLoading(true));\n\n  const { features: climateStations } = await getClimateStation(id);\n\n  if (!climateStations.length) {\n    // TODO: handle when we do not get a station back.\n  }\n\n  const stations = normalizeStations(climateStations);\n  const [station] = stations;\n\n  dispatch({\n    type: 'STATIONS_UPDATE',\n    stations: {\n      [id]: station,\n    },\n  });\n\n  // TODO: make this configurable for the user.\n  const limit = 30;\n  const today = moment();\n  const month = today.format('M');\n  const year = today.format('YYYY');\n\n  const { features: climateStationItems } = await getClimateStationItems({\n    id,\n    limit,\n    month,\n    year,\n  });\n  const items = normalizeStationItems(climateStationItems);\n\n  dispatch({\n    type: 'STATION_ITEMS_UPDATE',\n    items: {\n      [id]: items,\n    },\n  });\n\n  dispatch(setLoading(false));\n};\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport SearchPage from './components/SearchPage';\nimport StationPage from './components/StationPage';\n\nconst Routes = () => (\n  <Switch>\n    <Route path=\"/stations/search\" children={<SearchPage />} />\n    <Route path=\"/stations/:id\" children={<StationPage />} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\n\nimport Link from '../Link';\nimport Routes from '../../routes';\n\nimport styles from './styles.module.scss';\n\nconst App = () => (\n  <div className={styles.app}>\n    <div className={styles.header}>\n      <Link className={styles.logo} to=\"/\">\n        <h1>Pine Time</h1>\n      </Link>\n      <Link className={styles.searchButton} title=\"Search for a weather station\" to=\"/stations/search\" />\n    </div>\n    <div className={styles.content}>\n      <Routes />\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from './store';\nimport './styles/index.scss';\n\nconst store = createStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}